diff -Naurw ./drivers/gpu/drm/panel/Kconfig ../kernel-source/drivers/gpu/drm/panel/Kconfig
--- ./drivers/gpu/drm/panel/Kconfig	2021-01-23 16:04:06.000000000 +0100
+++ ../kernel-source/drivers/gpu/drm/panel/Kconfig	2021-04-21 10:02:19.381813255 +0200
@@ -249,6 +249,15 @@
 	  Say Y here if you want to enable support for Orise Technology
 	  otm8009a 480x800 dsi 2dl panel.
 
+config DRM_PANEL_RPI_DSICOMP
+	tristate "Raspberry Pi LCD - DSICOMP"
+	depends on OF
+	depends on DRM_MIPI_DSI
+	depends on BACKLIGHT_CLASS_DEVICE
+	help
+	  Say Y here if you want to enable support for Orise Technology
+	  otm8009a 480x800 dsi 2dl panel.
+
 config DRM_PANEL_OSD_OSD101T2587_53TS
 	tristate "OSD OSD101T2587-53TS DSI 1920x1200 video mode panel"
 	depends on OF
diff -Naurw ./drivers/gpu/drm/panel/Makefile ../kernel-source/drivers/gpu/drm/panel/Makefile
--- ./drivers/gpu/drm/panel/Makefile	2021-01-23 16:04:06.000000000 +0100
+++ ../kernel-source/drivers/gpu/drm/panel/Makefile	2021-04-21 10:02:19.381813255 +0200
@@ -23,6 +23,7 @@
 obj-$(CONFIG_DRM_PANEL_MANTIX_MLAF057WE51) += panel-mantix-mlaf057we51.o
 obj-$(CONFIG_DRM_PANEL_OLIMEX_LCD_OLINUXINO) += panel-olimex-lcd-olinuxino.o
 obj-$(CONFIG_DRM_PANEL_ORISETECH_OTM8009A) += panel-orisetech-otm8009a.o
+obj-$(CONFIG_DRM_PANEL_RPI_DSICOMP) += panel-rpi-dsicomp.o
 obj-$(CONFIG_DRM_PANEL_OSD_OSD101T2587_53TS) += panel-osd-osd101t2587-53ts.o
 obj-$(CONFIG_DRM_PANEL_PANASONIC_VVX10F034N00) += panel-panasonic-vvx10f034n00.o
 obj-$(CONFIG_DRM_PANEL_RASPBERRYPI_TOUCHSCREEN) += panel-raspberrypi-touchscreen.o
diff -Naurw ./drivers/gpu/drm/panel/panel-rpi-dsicomp.c ../kernel-source/drivers/gpu/drm/panel/panel-rpi-dsicomp.c
--- ./drivers/gpu/drm/panel/panel-rpi-dsicomp.c	1970-01-01 01:00:00.000000000 +0100
+++ ../kernel-source/drivers/gpu/drm/panel/panel-rpi-dsicomp.c	2021-04-21 11:51:49.993229996 +0200
@@ -0,0 +1,560 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) PCB Design Ltd. 2021
+ *
+ * Author: Botond Kardos <bkardos70@gmail.com>
+ */
+
+#include <linux/delay.h>
+#include <linux/err.h>
+#include <linux/fb.h>
+#include <linux/gpio.h>
+#include <linux/gpio/consumer.h>
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/of_graph.h>
+#include <linux/pm.h>
+#include <linux/backlight.h>
+#include <linux/regulator/consumer.h>
+
+#include <video/mipi_display.h>
+
+#include <drm/drm_crtc.h>
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+#include <drm/drm_print.h>
+
+
+/* I2C registers of the Atmel microcontroller. */
+enum REG_ADDR {
+	REG_ID = 0x80,
+	REG_PORTA, /* BIT(2) for horizontal flip, BIT(3) for vertical flip */
+	REG_PORTB,
+	REG_PORTC,
+	REG_PORTD,
+	REG_POWERON,
+	REG_PWM,
+	REG_DDRA,
+	REG_DDRB,
+	REG_DDRC,
+	REG_DDRD,
+	REG_TEST,
+	REG_WR_ADDRL,
+	REG_WR_ADDRH,
+	REG_READH,
+	REG_READL,
+	REG_WRITEH,
+	REG_WRITEL,
+	REG_ID2,
+};
+
+/* DSI D-PHY Layer Registers */
+#define D0W_DPHYCONTTX          0x0004
+#define CLW_DPHYCONTRX          0x0020
+#define D0W_DPHYCONTRX          0x0024
+#define D1W_DPHYCONTRX          0x0028
+#define COM_DPHYCONTRX          0x0038
+#define CLW_CNTRL               0x0040
+#define D0W_CNTRL               0x0044
+#define D1W_CNTRL               0x0048
+#define DFTMODE_CNTRL           0x0054
+
+/* DSI PPI Layer Registers */
+#define PPI_STARTPPI            0x0104
+#define PPI_BUSYPPI             0x0108
+#define PPI_LINEINITCNT         0x0110
+#define PPI_LPTXTIMECNT         0x0114
+#define PPI_CLS_ATMR            0x0140
+#define PPI_D0S_ATMR            0x0144
+#define PPI_D1S_ATMR            0x0148
+#define PPI_D0S_CLRSIPOCOUNT    0x0164
+#define PPI_D1S_CLRSIPOCOUNT    0x0168
+#define CLS_PRE                 0x0180
+#define D0S_PRE                 0x0184
+#define D1S_PRE                 0x0188
+#define CLS_PREP                0x01A0
+#define D0S_PREP                0x01A4
+#define D1S_PREP                0x01A8
+#define CLS_ZERO                0x01C0
+#define D0S_ZERO                0x01C4
+#define D1S_ZERO                0x01C8
+#define PPI_CLRFLG              0x01E0
+#define PPI_CLRSIPO             0x01E4
+#define HSTIMEOUT               0x01F0
+#define HSTIMEOUTENABLE         0x01F4
+
+/* DSI Protocol Layer Registers */
+#define DSI_STARTDSI            0x0204
+#define DSI_BUSYDSI             0x0208
+#define DSI_LANEENABLE          0x0210
+# define DSI_LANEENABLE_CLOCK           BIT(0)
+# define DSI_LANEENABLE_D0              BIT(1)
+# define DSI_LANEENABLE_D1              BIT(2)
+
+#define DSI_LANESTATUS0         0x0214
+#define DSI_LANESTATUS1         0x0218
+#define DSI_INTSTATUS           0x0220
+#define DSI_INTMASK             0x0224
+#define DSI_INTCLR              0x0228
+#define DSI_LPTXTO              0x0230
+#define DSI_MODE                0x0260
+#define DSI_PAYLOAD0            0x0268
+#define DSI_PAYLOAD1            0x026C
+#define DSI_SHORTPKTDAT         0x0270
+#define DSI_SHORTPKTREQ         0x0274
+#define DSI_BTASTA              0x0278
+#define DSI_BTACLR              0x027C
+
+/* DSI General Registers */
+#define DSIERRCNT               0x0300
+#define DSISIGMOD               0x0304
+
+/* DSI Application Layer Registers */
+#define APLCTRL                 0x0400
+#define APLSTAT                 0x0404
+#define APLERR                  0x0408
+#define PWRMOD                  0x040C
+#define RDPKTLN                 0x0410
+#define PXLFMT                  0x0414
+#define MEMWRCMD                0x0418
+
+/* LCDC/DPI Host Registers */
+#define LCDCTRL                 0x0420
+#define HSR                     0x0424
+#define HDISPR                  0x0428
+#define VSR                     0x042C
+#define VDISPR                  0x0430
+#define VFUEN                   0x0434
+
+/* DBI-B Host Registers */
+#define DBIBCTRL                0x0440
+
+/* SPI Master Registers */
+#define SPICMR                  0x0450
+#define SPITCR                  0x0454
+
+/* System Controller Registers */
+#define SYSSTAT                 0x0460
+#define SYSCTRL                 0x0464
+#define SYSPLL1                 0x0468
+#define SYSPLL2                 0x046C
+#define SYSPLL3                 0x0470
+#define SYSPMCTRL               0x047C
+
+/* GPIO Registers */
+#define GPIOC                   0x0480
+#define GPIOO                   0x0484
+#define GPIOI                   0x0488
+
+
+struct rpi_panel {
+	struct i2c_adapter *	adapter;
+	struct drm_panel	base;
+	struct mipi_dsi_device *dsi;
+	u8			i2c_addr;
+};
+
+
+static const struct drm_display_mode rpi_touchscreen_modes[] = {
+	{
+		.clock = 25979400 / 1000,
+		.hdisplay = 800,
+		.hsync_start = 800 + 1,
+		.hsync_end = 800 + 1 + 2,
+		.htotal = 800 + 1 + 2 + 46,
+		.vdisplay = 480,
+		.vsync_start = 480 + 7,
+		.vsync_end = 480 + 7 + 2,
+		.vtotal = 480 + 7 + 2 + 21,
+	},
+};
+
+
+static inline struct rpi_panel *panel_to_rpi_panel(struct drm_panel *panel)
+{
+	return container_of(panel, struct rpi_panel, base);
+}
+
+
+static int generic_i2c_read(struct rpi_panel *panel, u8 dev_addr, void *buf,
+			    size_t len)
+{
+	struct i2c_msg msgs[2];
+	size_t this_len;
+	int ret;
+
+	msgs[0].addr = panel->i2c_addr;
+	msgs[0].flags = 0;
+	msgs[0].len = 1;
+	msgs[0].buf = &dev_addr;
+	msgs[1].addr = panel->i2c_addr;
+	msgs[1].flags = I2C_M_RD;
+	msgs[1].len = len;
+	msgs[1].buf = buf;
+
+	while (len) {
+		this_len = len;
+		if (this_len > 16)
+			this_len = 16;
+
+		msgs[1].len = this_len;
+
+		ret = i2c_transfer(panel->adapter, msgs, ARRAY_SIZE(msgs));
+		if (ret < 0)
+			return ret;
+
+		if (ret != ARRAY_SIZE(msgs))
+			break;
+
+		msgs[1].buf += this_len;
+		dev_addr += this_len;
+		len -= this_len;
+	}
+
+	return msgs[1].buf - (u8 *)buf;
+} /* generic_i2c_read */
+
+
+static int generic_i2c_write(struct rpi_panel *panel, u8 dev_addr, void *buf,
+			     size_t len)
+{
+	struct i2c_msg msgs[1];
+	int ret;
+
+	msgs[0].addr = panel->i2c_addr;
+	msgs[0].flags = 0;
+	msgs[0].len = 1 + len;
+	msgs[0].buf = kmalloc(1 + len, GFP_KERNEL);
+	if (!msgs[0].buf)
+		return -ENOMEM;
+
+	msgs[0].buf[0] = dev_addr;
+	memcpy(&msgs[0].buf[1], buf, len);
+
+	ret = i2c_transfer(panel->adapter, msgs, ARRAY_SIZE(msgs));
+
+	kfree(msgs[0].buf);
+
+	if (ret < 0)
+		return ret;
+
+	return ret == ARRAY_SIZE(msgs) ? len : 0;
+} /* generic_i2c_write */
+
+
+static int rpi_i2c_read(struct rpi_panel *panel, u8 addr, u8 *p_val)
+{
+	int ret;
+
+	ret = generic_i2c_read(panel, addr, p_val, 1);
+	if (ret != 1)
+		printk(KERN_ALERT "**** %s %i   generic_i2c_read failed\n", __func__, __LINE__);
+
+	return ret;
+} /* rpi_i2c_read */
+
+
+static void rpi_i2c_write(struct rpi_panel *panel, u8 addr, u8 val)
+{
+	int ret;
+
+	ret = generic_i2c_write(panel, addr, &val, 1);
+	if (ret != 1)
+		printk(KERN_ALERT "**** %s %i   generic_i2c_write failed\n", __func__, __LINE__);
+} /* rpi_i2c_write */
+
+
+static void rpi_dsi_read(struct rpi_panel *panel, u16 addr, u32 *val)
+{
+	ssize_t ret;
+
+	cpu_to_le16s(&addr);
+	ret = mipi_dsi_generic_read(panel->dsi, &addr, sizeof(addr), val, sizeof(*val));
+	if (ret >= 0)
+		le32_to_cpus(val);
+	else
+		printk(KERN_ALERT "**** %s %i failed   ret: %i\n", __func__, __LINE__, ret);
+}
+
+
+static int rpi_dsi_write(struct rpi_panel *panel, u16 reg, u32 val)
+{
+	u8 msg[] = {
+		reg,
+		reg >> 8,
+		val,
+		val >> 8,
+		val >> 16,
+		val >> 24,
+	};
+	int ret;
+
+	ret = mipi_dsi_generic_write(panel->dsi, msg, sizeof(msg));
+	if (ret < 0)
+		printk(KERN_ALERT "**** %s %i failed   ret: %i\n", __func__, __LINE__, ret);
+
+	return ret;
+} /* rpi_dsi_write */
+
+
+
+static int rpi_touchscreen_disable(struct drm_panel *panel)
+{
+	struct rpi_panel *p_mypanel;
+
+	printk(KERN_ALERT "**** %s %i\n", __func__, __LINE__);
+
+	p_mypanel = NULL;
+	if (panel != NULL) {
+		p_mypanel = panel_to_rpi_panel(panel);
+		printk(KERN_ALERT "**** %s %i   p_mypanel: 0x%08x\n", __func__, __LINE__, (int)p_mypanel);
+	}
+
+	rpi_i2c_write(p_mypanel, REG_PWM, 0);
+	rpi_i2c_write(p_mypanel, REG_POWERON, 0);
+	udelay(1);
+
+	return 0;
+}
+
+
+static int rpi_touchscreen_noop(struct drm_panel *panel)
+{
+	printk(KERN_ALERT "**** %s %i\n", __func__, __LINE__);
+	return 0;
+}
+
+
+static int rpi_touchscreen_enable(struct drm_panel *panel)
+{
+	int i, ret;
+	u8 reg_val;
+	u32 reg32_val;
+	struct rpi_panel *p_mypanel;
+
+	printk(KERN_ALERT "**** %s %i   panel: 0x%08x\n", __func__, __LINE__, (int)panel);
+
+	p_mypanel = NULL;
+	if (panel != NULL) {
+		p_mypanel = panel_to_rpi_panel(panel);
+		printk(KERN_ALERT "**** %s %i   p_mypanel: 0x%08x\n", __func__, __LINE__, (int)p_mypanel);
+	}
+
+	if (p_mypanel != NULL)
+		printk(KERN_ALERT "**** %s %i   adapter: 0x%08x   dsi: 0x%08x   i2c_addr: 0x%02x\n", __func__, __LINE__,
+		       (int)p_mypanel->adapter, (int)p_mypanel->dsi, (int)p_mypanel->i2c_addr);
+
+
+	rpi_i2c_write(p_mypanel, REG_POWERON, 1);
+
+	/* Wait for nPWRDWN to go high to indicate poweron is done. */
+	for (i = 0; i < 100; i++) {
+		if (rpi_i2c_read(p_mypanel, REG_PORTB, &reg_val) == 1)
+			if (reg_val & 1)
+				break;
+	}
+	printk(KERN_ALERT "**** %s %i   i: %i\n", __func__, __LINE__, i);
+
+	ret = rpi_dsi_write(p_mypanel, DSI_LANEENABLE,
+			    DSI_LANEENABLE_CLOCK |
+			    DSI_LANEENABLE_D0);
+
+	rpi_dsi_write(p_mypanel, PPI_D0S_CLRSIPOCOUNT, 0x05);
+	rpi_dsi_write(p_mypanel, PPI_D1S_CLRSIPOCOUNT, 0x05);
+	rpi_dsi_write(p_mypanel, PPI_D0S_ATMR, 0x00);
+	rpi_dsi_write(p_mypanel, PPI_D1S_ATMR, 0x00);
+	rpi_dsi_write(p_mypanel, PPI_LPTXTIMECNT, 0x03);
+
+	rpi_dsi_write(p_mypanel, SPICMR, 0x00);
+	rpi_dsi_write(p_mypanel, LCDCTRL, 0x00100150);
+	rpi_dsi_write(p_mypanel, SYSCTRL, 0x040f);
+	msleep(100);
+
+	rpi_dsi_write(p_mypanel, PPI_STARTPPI, 0x01);
+	rpi_dsi_write(p_mypanel, DSI_STARTDSI, 0x01);
+	msleep(100);
+
+	/* Turn on the backlight. */
+	rpi_i2c_write(p_mypanel, REG_PWM, 255);
+
+	/* Default to the same orientation as the closed source
+	 * firmware used for the panel.  Runtime rotation
+	 * configuration will be supported using VC4's plane
+	 * orientation bits.
+	 */
+	rpi_i2c_write(p_mypanel, REG_PORTA, BIT(2));
+
+	return 0;
+} /* rpi_touchscreen_enable */
+
+
+static int rpi_touchscreen_get_modes(struct drm_panel *		panel,
+				     struct drm_connector *	connector)
+{
+	unsigned int i, num = 0;
+	static const u32 bus_format = MEDIA_BUS_FMT_RGB888_1X24;
+	struct drm_display_mode *mode;
+
+	printk(KERN_ALERT "**** %s %i\n", __func__, __LINE__);
+
+	for (i = 0; i < ARRAY_SIZE(rpi_touchscreen_modes); i++) {
+		const struct drm_display_mode *m = &rpi_touchscreen_modes[i];
+		struct drm_display_mode *mode;
+
+		mode = drm_mode_duplicate(connector->dev, m);
+		if (!mode) {
+			dev_err(panel->dev, "failed to add mode %ux%u@%u\n",
+				m->hdisplay, m->vdisplay,
+				drm_mode_vrefresh(m));
+			continue;
+		}
+
+		mode->type |= DRM_MODE_TYPE_DRIVER;
+
+		if (i == 0)
+			mode->type |= DRM_MODE_TYPE_PREFERRED;
+
+		drm_mode_set_name(mode);
+
+		drm_mode_probed_add(connector, mode);
+		num++;
+	}
+
+	connector->display_info.bpc = 8;
+	connector->display_info.width_mm = 154;
+	connector->display_info.height_mm = 86;
+	drm_display_info_set_bus_formats(&connector->display_info,
+					 &bus_format, 1);
+
+	return num;
+} /* rpi_touchscreen_get_modes */
+
+
+static const struct drm_panel_funcs rpi_touchscreen_funcs = {
+	.disable	= rpi_touchscreen_disable,
+	.unprepare	= rpi_touchscreen_noop,
+	.prepare	= rpi_touchscreen_noop,
+	.enable		= rpi_touchscreen_enable,
+	.get_modes	= rpi_touchscreen_get_modes,
+};
+
+
+
+static int rpi_dsicomp_probe(struct mipi_dsi_device *dsi)
+{
+	int ret;
+	struct device_node *i2c_adapter_node;
+	struct device *dev = &dsi->dev;
+	struct i2c_adapter *adapter;
+	struct rpi_panel *p_my_panel;
+	u32 i2c_addr;
+	u8 chip_ver;
+	int i;
+
+	printk(KERN_ALERT "**** %s %i\n", __func__, __LINE__);
+
+	p_my_panel = devm_kzalloc(dev, sizeof(*p_my_panel), GFP_KERNEL);
+	if (!p_my_panel)
+		return -ENOMEM;
+
+	mipi_dsi_set_drvdata(dsi, p_my_panel);
+
+	i2c_adapter_node = of_parse_phandle(dev->of_node, "i2c-adapter", 0);
+	printk(KERN_ALERT "**** %s %i   i2c_adapter_node: 0x%08x\n", __func__, __LINE__, (int)i2c_adapter_node);
+	if (!i2c_adapter_node)
+		return -ENODEV;
+
+	adapter = of_find_i2c_adapter_by_node(i2c_adapter_node);
+	of_node_put(i2c_adapter_node);
+	printk(KERN_ALERT "**** %s %i   adapter: 0x%08x\n", __func__, __LINE__, (int)adapter);
+	if (!adapter)
+		return -ENODEV;
+
+	ret = of_property_read_u32(dev->of_node, "i2c-addr", &i2c_addr);
+	printk(KERN_ALERT "**** %s %i   ret: %i   i2c_addr: 0x%02x\n", __func__, __LINE__,
+	       ret, (int)i2c_addr);
+
+	p_my_panel->adapter = adapter;
+	p_my_panel->i2c_addr = i2c_addr;
+	p_my_panel->dsi = dsi;
+
+
+	ret = rpi_i2c_read(p_my_panel, REG_ID, &chip_ver);
+	printk(KERN_ALERT "**** %s %i   ret: %i   chip_ver: 0x%02x\n", __func__, __LINE__, ret, (int)chip_ver);
+	if ((ret != 1) || (chip_ver != 0xc3))
+		return -ENODEV;
+
+	ret = rpi_i2c_read(p_my_panel, REG_PORTA, &chip_ver);
+	printk(KERN_ALERT "**** %s %i   ret: %i   PORTA: 0x%02x\n", __func__, __LINE__, ret, (int)chip_ver);
+
+	ret = rpi_i2c_read(p_my_panel, REG_PORTB, &chip_ver);
+	printk(KERN_ALERT "**** %s %i   ret: %i   PORTB: 0x%02x\n", __func__, __LINE__, ret, (int)chip_ver);
+
+
+	rpi_i2c_write(p_my_panel, REG_POWERON, 1);
+
+
+	ret = rpi_i2c_read(p_my_panel, REG_ID, &chip_ver);
+	printk(KERN_ALERT "**** %s %i   ret: %i   chip_ver: 0x%02x\n", __func__, __LINE__, ret, (int)chip_ver);
+
+	ret = rpi_i2c_read(p_my_panel, REG_PORTA, &chip_ver);
+	printk(KERN_ALERT "**** %s %i   ret: %i   PORTA: 0x%02x\n", __func__, __LINE__, ret, (int)chip_ver);
+
+	ret = rpi_i2c_read(p_my_panel, REG_PORTB, &chip_ver);
+	printk(KERN_ALERT "**** %s %i   ret: %i   PORTB: 0x%02x\n", __func__, __LINE__, ret, (int)chip_ver);
+
+	/* turn off panel for now */
+	rpi_i2c_write(p_my_panel, REG_POWERON, 0);
+
+	dsi->lanes = 1;
+	dsi->format = MIPI_DSI_FMT_RGB888;
+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_SYNC_PULSE |
+			  MIPI_DSI_MODE_LPM;
+
+	drm_panel_init(&p_my_panel->base, dev, &rpi_touchscreen_funcs, DRM_MODE_CONNECTOR_DSI);
+	drm_panel_add(&p_my_panel->base);
+
+	ret = mipi_dsi_attach(dsi);
+	printk(KERN_ALERT "**** %s %i   ret: %i\n", __func__, __LINE__, ret);
+
+	if (ret < 0) {
+		dev_err(dev, "mipi_dsi_attach failed. Is host ready?\n");
+		drm_panel_remove(&p_my_panel->base);
+		return ret;
+	}
+
+	return 0;
+} /* rpi_dsicomp_probe */
+
+
+static int rpi_dsicomp_remove(struct mipi_dsi_device *dsi)
+{
+	printk(KERN_ALERT "**** %s %i\n", __func__, __LINE__);
+	mipi_dsi_detach(dsi);
+
+	return 0;
+}
+
+static const struct of_device_id rpi_dsicomp_of_match[] = {
+	{ .compatible = "raspberrypi,rpi-dsicomp" },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, rpi_dsicomp_of_match);
+
+static struct mipi_dsi_driver rpi_dsicomp_driver = {
+	.probe			= rpi_dsicomp_probe,
+	.remove			= rpi_dsicomp_remove,
+	.driver			= {
+		.name		= "panel-rpi-dsicomp",
+		.of_match_table = rpi_dsicomp_of_match,
+	},
+};
+module_mipi_dsi_driver(rpi_dsicomp_driver);
+
+MODULE_AUTHOR("Eric Anholt <eric@anholt.net>");
+MODULE_AUTHOR("Botond Kardos <bkardos70@gmail.com>");
+MODULE_DESCRIPTION("Raspberry Pi 7-inch touchscreen driver");
+MODULE_LICENSE("GPL v2");
